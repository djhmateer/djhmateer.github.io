---
layout: post
title:  "Best practices for Sort, Filter, Page using MSSQL and ASP.NET MVC"
menu: review
categories: jekyll
published: true
---
## Summary
Make SQL do the heavy lifting of: Sorting, Filtering, Paging.  
Keep data access as simple as possible in your apps 

## Background
I've been writing business apps for 16 years, with the last 10 being on MSSQL with ASP.NET.  What I've noticed is that my applications are much simpler and more performant if I <b>leave data manipulation to... the database!</b>

I currently work in large enterprises, and have found that many people I work with, are more comfortable with SQL than general purpose coding languages.  They like it if they can see how the app works looking into which Stored Procs are called.

## Example App
 // Show the ASP.NET MVC app

 // Show DAL / Service layer - repository pattern

 // Database 
 
## SQL Conventions
{% highlight sql %}
CREATE TABLE [dbo].[Author] (
    [AuthorID]    INT            IDENTITY (1, 1) NOT NULL,
    [FirstName]   NVARCHAR (255) NOT NULL,
    [LastName]    NVARCHAR (255) NOT NULL,
    [DateOfBirth] DATE           NULL,
    PRIMARY KEY CLUSTERED ([AuthorID] ASC)
);
{% endhighlight %}

* Identity Ints for the PK (not GUIDS)
* AuthorID for ID Column (not ID) 
* Singular table names preferred see [here](http://stackoverflow.com/a/809018/26086) and [here](http://stackoverflow.com/a/5841297/26086)
 so that Master detail link tables are nicer eg AuthorAddress if we needed to model Authors having > 1 Address.

## Repository Conventions
The overall concept is to let [Dapper](https://github.com/StackExchange/dapper-dot-net) do the mapping of what is returned from the SQL to a List of Authors.

{% highlight csharp %}
public static class Util
{
    public static IDbConnection GetOpenConnection()
    {
        var connection = new SqlConnection(
            ConfigurationManager.ConnectionStrings["ThinkBooksConnectionString"].ConnectionString);
        connection.Open();
        return connection;
    }
}

public class AuthorsRepository
{
    public List<Author> GetAuthors()
    {
        using (var db = Util.GetOpenConnection())
        {
            return db.Query<Author>("SELECT * FROM Author ORDER BY LastName").ToList();
        }
    }
}
{% endhighlight %}

## Model Conventions
![Cows](/assets/VSThinkBooks.jpg)
<p>Keep models simple.  Here is current solution of Controllers/Models/Services (Repository and Utility static class)</p>


## Controller Conventions
RESTful resources seem to be mostly plural eg [Spotify API](https://developer.spotify.com/web-api/endpoint-reference/) so I will use:

{% highlight html %}
/Authors/
/Authors/Details/1
/Authors/Edit/1
/Authors/Delete/1
/Authors/Create
{% endhighlight %}
<p>The URL structure we will be using</p>

![Cows](/assets/VSThinkBook2.jpg)
<p>Use VS templates to scaffold views (once you have created your Author.cs model)</p>

## Sorting
Lets enable bi-directional sorting on the FirstName Column





## Sort Direction
asdf



## Use a SPROC



 // static method to call the db inside a using

 // order, filter, Page
 // use get requests so can bookmark

 // use javascript to simplify URLs

## Measuring speed with MiniProfiler
// demo

## Simple Query Optimisation 
// right click apply index

## Validation of Data 
// always use Parameters
// Dapper great for type translation

## Have to use SP's?
// no big deal

## Source control your DB
// even if the enterprise doesn't... easy




